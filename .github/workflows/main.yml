# Unique name for this workflow
name: Validate Deployment Manually

# Definition when the workflow should run
on:
    # This workflow can now be manually triggered
    workflow_dispatch:

# Jobs to be executed when the above conditions are met
jobs:
    # This is the name of the job. You can give it whatever name you want
    validate-deployment-on-develop-org:
        # This job runs inside a VM on the latest version of Ubuntu
        runs-on: ubuntu-latest

        steps:
            # Install Node.js
            - uses: actions/setup-node@v4
              with:
                node-version: '20'

            # Checkout source code
            - name: 'Checkout source code'
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-linux-x64.tar.xz
                  mkdir -p ~/cli/sf
                  tar xJf sf-linux-x64.tar.xz -C ~/cli/sf --strip-components 1
                  echo "$HOME/cli/sf/bin" >> $GITHUB_PATH
                  ~/cli/sf/bin/sf version

            # Install SFDX Git Delta plugin
            - name: 'Install SFDX Git Delta'
              run: |
                  echo y | sf plugins install "sfdx-git-delta@${{ vars.SGD_VERSION }}"
                  sfdx plugins

            # Install Java
            - name: 'Install Java'
              run: |
                sudo apt-get update
                sudo apt install default-jdk

            # Install SFDX scanner
            - name: 'Install SFDX scanner'
              run: sfdx plugins:install @salesforce/sfdx-scanner

            # Populate auth file with SFDX URL secret of integration org
            - name: 'Populate auth file with SFDX_URL secret of integration org'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_INTEGRATION_URL }} > ./SFDX_INTEGRATION_URL.txt

            # Authenticate to org using the URL stored in the text file
            - name: 'Authenticate to Integration Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a integration

            # Create delta packages for new, modified or deleted metadata
            - name: 'Create delta packages for new, modified, or deleted metadata'
              run: |
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/
                  cd changed-sources
                  cd package
                  cat package.xml
                  ls -ltR

            # Scan code
            - name: 'Scan code'
              run: |
                  cd changed-sources
                  sfdx scanner:run --format sarif --target './**/*.cls' --category "Design,Best Practices,Performance" --outfile 'apexScanResults.sarif'  
                  cat apexScanResults.sarif
                  cd ..

            # Upload SARIF file
            - name: Upload SARIF file
              uses: github/codeql-action/upload-sarif@v2
              with:
                sarif_file: changed-sources/apexScanResults.sarif

            # Check-only deploy delta changes - run all tests
            - name: 'Check-only deploy delta changes - run all tests'
              run: |
                  sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunLocalTests --verbose

            # Deploy destructive changes (if any)
            - name: 'Deploy destructive changes (if any)'
              run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings --verbose
